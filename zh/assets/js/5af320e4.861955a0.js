(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[470],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return h}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),u=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||r;return n?i.createElement(m,a(a({ref:t},s),{},{components:n})):i.createElement(m,a({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<r;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var i=n(2122),o=n(9756),r=(n(7294),n(3905)),a=["components"],l={title:"Contribute",sidebar_position:1},c={unversionedId:"Guide/web-ifc/Contribution",id:"Guide/web-ifc/Contribution",isDocsHomePage:!1,title:"Contribute",description:"Web-ifc guide",source:"@site/docs/Guide/web-ifc/Contribution.mdx",sourceDirName:"Guide/web-ifc",slug:"/Guide/web-ifc/Contribution",permalink:"/info/zh/docs/Guide/web-ifc/Contribution",version:"current",sidebarPosition:1,frontMatter:{title:"Contribute",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Handling bounties",permalink:"/info/zh/docs/Guide/Handling bounties"},next:{title:"\u7b80\u4ecb",permalink:"/info/zh/docs/Guide/web-ifc/Introduction"}},u=[{value:"Web-ifc guide",id:"web-ifc-guide",children:[{value:"But I know nothing about the project!",id:"but-i-know-nothing-about-the-project",children:[]}]},{value:"Cloning the repository locally",id:"cloning-the-repository-locally",children:[]},{value:"Setting up the project",id:"setting-up-the-project",children:[{value:"Build it locally",id:"build-it-locally",children:[]}]},{value:"Quick setup",id:"quick-setup",children:[]},{value:"Building WASM module",id:"building-wasm-module",children:[{value:"Setting up emscripten",id:"setting-up-emscripten",children:[]},{value:"WASM library",id:"wasm-library",children:[]}]},{value:"Writing code on it",id:"writing-code-on-it",children:[{value:"Using an IDE (Integrated Development Environment)",id:"using-an-ide-integrated-development-environment",children:[]},{value:"Compiler for code",id:"compiler-for-code",children:[]}]},{value:"Creating a submit pull request",id:"creating-a-submit-pull-request",children:[{value:"How do I get started?",id:"how-do-i-get-started",children:[]}]}],s={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"web-ifc-guide"},"Web-ifc guide"),(0,r.kt)("p",null,"\ud83d\udc69\u200d\ud83d\udcbb ",(0,r.kt)("strong",{parentName:"p"},"web-ifc")," is a javascript library to read and write ifc files, at native speeds. ",(0,r.kt)("strong",{parentName:"p"},"web-ifc")," is part of the ",(0,r.kt)("a",{parentName:"p",href:"https://ifcjs.github.io/info/"},"ifc.js")," project, which aims to lower the threshold for developing open BIM applications."),(0,r.kt)("h3",{id:"but-i-know-nothing-about-the-project"},"But I know nothing about the project!"),(0,r.kt)("p",null,"\ud83d\udc69\u200d\ud83c\udfeb\nDon't worry: if you want to participate, we will give ",(0,r.kt)("strong",{parentName:"p"},"top priority to your onboarding")," so that you can start using the library right away and help us with whatever you want."),(0,r.kt)("h2",{id:"cloning-the-repository-locally"},"Cloning the repository locally"),(0,r.kt)("p",null,"\ud83d\udcc1\nThe first thing to do is to clone the repository to your local machine.",(0,r.kt)("br",null),"Start by forking the project (click on fork button on the top right) and choosing yourself as the owner of the fork (if asked).",(0,r.kt)("br",null),"Now go to the forked repository, click on code button (generally green in color) and copy the https URL."),(0,r.kt)("p",null,"\ud83d\udce6 Now open terminal on your machine and change the current working directory to the location where you want to clone the directory.\nEnter these commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    //Type git clone, and then paste the URL you copied earlier like this\n    git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n\n    //change the current directory and enter the cloned repository using cd, and then name of the repository like this\n    cd web-ifc\n\n    // Using git checkout -b will create a new branch and immediately switch to it\n    git checkout -b \uff1cnew-branch-name\uff1e\n    //<new-branch-name> -> name your branch exactly same as the bounty name or the name starts with bounty ID\n\n    //Minimise this terminal instead of closing it\n")),(0,r.kt)("h2",{id:"setting-up-the-project"},"Setting up the project"),(0,r.kt)("h3",{id:"build-it-locally"},"Build it locally"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    //To install web-ifc\n    npm install web-ifc\n")),(0,r.kt)("h2",{id:"quick-setup"},"Quick setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'//Use these in your project whenever needed not in the terminal right now\nconst WebIFC = require("web-ifc/web-ifc-api.js");\n\n// initialize the API\nconst ifcApi = new WebIFC.IfcAPI();\n\n// initialize the library\nawait ifcApi.Init();\n\n// open a model from data\nlet modelID = ifcApi.OpenModel(/* IFC data as a string or UInt8Array */, /* optional settings object */, );\n\n// the model is now loaded! use modelID to fetch geometry or properties\n// checkout examples/usage for some details on how to read/write IFC\n\n// close the model, all memory is freed\nifcApi.CloseModel(modelID);\n\n')),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tomvandig/web-ifc/tree/main/examples/usage/src"},"examples")," for more details on how to use web-ifc."),(0,r.kt)("h2",{id:"building-wasm-module"},"Building WASM module"),(0,r.kt)("h3",{id:"setting-up-emscripten"},"Setting up emscripten"),(0,r.kt)("p",null,"\ud83d\udc23 The WASM library is built through emscripten, please see ",(0,r.kt)("a",{parentName:"p",href:"https://emscripten.org/docs/getting_started/downloads.html"},"the emscripten installation guide")," for information on how to set up emscripten. Afterwards ",(0,r.kt)("inlineCode",{parentName:"p"},"emsdk_env")," needs to be in your path(environment variable)."),(0,r.kt)("h3",{id:"wasm-library"},"WASM library"),(0,r.kt)("p",null,"\ud83c\udf0f Open the terminal again and run these commands:"),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install")," to install all dependencies. ",(0,r.kt)("br",null),"\nRun ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run setup-env")," whenever you open a new terminal, this will set up the required emscripten environment variables for you to compile code. ",(0,r.kt)("br",null),"\nRun ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run build-release-all")," to build a release version of the wasm binary and the accompanying web-ifc api. It will be placed in ",(0,r.kt)("inlineCode",{parentName:"p"},"./dist"),". ",(0,r.kt)("br",null),"\nRun ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run dev")," to launch a development server with a basic ifc file viewer."),(0,r.kt)("h2",{id:"writing-code-on-it"},"Writing code on it"),(0,r.kt)("h3",{id:"using-an-ide-integrated-development-environment"},"Using an IDE (Integrated Development Environment)"),(0,r.kt)("p",null,"\ud83d\udcdd VS Code - You can install VS Code from ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/download"},"here"),"."),(0,r.kt)("h3",{id:"compiler-for-code"},"Compiler for code"),(0,r.kt)("p",null,"\ud83d\udcda GCC with MinGW (for windows) - You can configure GCC C++ compiler from ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/cpp/config-mingw"},"here"),".\nClang (for macOS) - You can configure Clang compiler from ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/cpp/config-clang-mac"},"here"),"."),(0,r.kt)("p",null,"\u261d Although the primary focus of the library is to be used through WebAssembly in the browser/nodejs, the project can be used stand-alone as a c++ library or executable. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tomvandig/web-ifc/blob/main/src/wasm/web-ifc-test.cpp"},"here")," for a simple entry point to get started."),(0,r.kt)("h2",{id:"creating-a-submit-pull-request"},"Creating a submit pull request"),(0,r.kt)("p",null,"\ud83d\udd22 Open you terminal and enter these commands:"),(0,r.kt)("p",null,"use ",(0,r.kt)("inlineCode",{parentName:"p"},"git status")," to review your changes.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"git checkout master")," to checkout to master branch.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"git pull")," to sync your cloned repository with the origin repository.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"git checkout <branch-name>")," to go back to your working branch.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"git pull")," to sync with the the main branch.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"git add .")," to stage your changes.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},'git commit -m "type a message to display for changes" ')," to commit the changes made.",(0,r.kt)("br",null),"\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"git push")," to push the changes to the main repository."),(0,r.kt)("p",null,"Now go to your github, inside the forked version of the repository.\nYou will see a notification on the right (if not click on pull requests) 'compare & pull request' (generally green color button), click on it.\nNow describe the changes you made in short and click on 'create pull request'."),(0,r.kt)("h3",{id:"how-do-i-get-started"},"How do I get started?"),(0,r.kt)("p",null,"\ud83d\ude0a\n",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/FXfyR4XrKT"},"Talk to us!")," Tell us about your situation and your ideas and we will help you get started as soon as possible."))}p.isMDXComponent=!0}}]);