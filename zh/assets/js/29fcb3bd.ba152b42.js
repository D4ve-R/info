(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[626],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(h,a(a({ref:t},d),{},{components:n})):i.createElement(h,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3878:function(e,t,n){"use strict";n.d(t,{r:function(){return a}});var i=n(7294),r="icon_1PGw",o=n(9205),a=function(e){return i.createElement("div",{className:"alert alert--primary",role:"alert",style:{margin:"2rem"}},i.createElement("div",{className:r},i.createElement(o.A,{icon:"\ud83d\udca1",active:"true"})),e.children)}},983:function(e,t,n){"use strict";n.d(t,{M:function(){return s}});var i=n(7294),r=n(9205),o="titleOffset_2I3u",a="iconContainer_1xRA",s=function(e){var t=e.title?i.createElement("div",{className:"card__header"},i.createElement("span",{className:a},e.icon&&i.createElement(r.A,{icon:e.icon,link:e.link,active:"true"})),i.createElement("h3",{className:e.icon&&o},e.title)):"";return i.createElement("div",{className:"card-demo",style:{margin:"2rem"}},i.createElement("div",{className:"card"},t,i.createElement("div",{className:"card__body"},i.createElement("p",null," ",e.children," "))))}},9205:function(e,t,n){"use strict";n.d(t,{A:function(){return c}});var i=n(7294),r="hidden_2JtY",o="iconContainer_2Rnc",a="visible_2147",s="link_Lh4h",l="clickable_3vcc",c=function(e){var t=" "+(e.active?a:r),n=s+" "+(e.link&&l);return i.createElement("div",{className:o+t},i.createElement("a",{href:e.link,className:n},e.icon||"\ud83d\ude80"))}},6649:function(e,t,n){"use strict";n.d(t,{x:function(){return o}});var i=n(7294),r="threeScene_3QXR",o=function(e){return i.createElement("iframe",{className:r,width:"100%",height:"600px",key:Math.random(),src:e.link,frameBorder:"0"})}},8537:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var i=n(2122),r=n(9756),o=(n(7294),n(3905)),a=n(983),s=(n(3878),n(6649),["components"]),l={title:"\ud83c\udf10 Socket.IO",sidebar_position:1},c={unversionedId:"Guide/web-ifc-viewer/Tutorials/Socket",id:"Guide/web-ifc-viewer/Tutorials/Socket",isDocsHomePage:!1,title:"\ud83c\udf10 Socket.IO",description:"Introduction",source:"@site/docs/Guide/web-ifc-viewer/Tutorials/Socket.mdx",sourceDirName:"Guide/web-ifc-viewer/Tutorials",slug:"/Guide/web-ifc-viewer/Tutorials/Socket",permalink:"/info/zh/docs/Guide/web-ifc-viewer/Tutorials/Socket",version:"current",sidebarPosition:1,frontMatter:{title:"\ud83c\udf10 Socket.IO",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83e\udd0f Picking",permalink:"/info/zh/docs/Guide/web-ifc-viewer/Tutorials/Picking"},next:{title:"\ud83d\uddc3\ufe0f IFC to gLTF",permalink:"/info/zh/docs/Guide/web-ifc-viewer/Tutorials/IFC to gLTF"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"Import dependencies",id:"import-dependencies",children:[{value:"Express",id:"express",children:[]},{value:"Socket.IO",id:"socketio",children:[]}]},{value:"How to do it",id:"how-to-do-it",children:[{value:"Folder Structure",id:"folder-structure",children:[]},{value:"Getting User Initials/Details",id:"getting-user-initialsdetails",children:[]},{value:"Getting Camera Position and Sending to Server",id:"getting-camera-position-and-sending-to-server",children:[]},{value:"Little styling",id:"little-styling",children:[]}]},{value:"The result",id:"the-result",children:[]},{value:"Next steps",id:"next-steps",children:[]}],p={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"\ud83d\udeb6\u200d\u2640\ufe0f With unlimited power of IFC.js at your fingertips you can now easily view and perform operations on IFC files easily. What about ",(0,o.kt)("strong",{parentName:"p"},"networking"),"? In this tutorial we will learn how to share camera position over ",(0,o.kt)("strong",{parentName:"p"},"Socket.IO")," and view it in other user's browser. "),(0,o.kt)(a.M,{mdxType:"IfcCard"},"\u270c Dig into the code and check out all the details about the ",(0,o.kt)("a",{href:"https://github.com/aka-blackboots/hello-world/tree/main/examples/web-ifc-viewer/socket-io"},"Socket.IO Integration")," on Github."),(0,o.kt)("h2",{id:"import-dependencies"},"Import dependencies"),(0,o.kt)("h3",{id:"express"},"Express"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"    npm install express\n")),(0,o.kt)("p",null,"Express provides us with tooling for HTTP server, it is framework based upon Node."),(0,o.kt)("h3",{id:"socketio"},"Socket.IO"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"    npm install socket.io\n")),(0,o.kt)("p",null,"Socket.IO provides bi-directional communication between a server and client."),(0,o.kt)("h2",{id:"how-to-do-it"},"How to do it"),(0,o.kt)("h3",{id:"folder-structure"},"Folder Structure"),(0,o.kt)("p",null,"\ud83d\udc69\u200d\ud83c\udfeb For this tutorial, our folder strucutre will be a little different, but if you've been following other tutorials. This will be easy!"),(0,o.kt)("h4",{id:"indexjs"},"index.js"),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file, this file will hold the code for ",(0,o.kt)("strong",{parentName:"p"},"Server Management"),".\nWe will create a express app and using that app we will create a server using ",(0,o.kt)("strong",{parentName:"p"},"Socket.IO")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\n\n// Creating a express app\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\n\nconst { Server } = require(\"socket.io\");\n// Creating Socket Server\nconst io = new Server(server);\n\n\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n")),(0,o.kt)("h4",{id:"static-folder"},"Static Folder"),(0,o.kt)("p",null,"We will use this folder to store all the files that will be necessary and will be served to user when they open the browser.\nLet's get started by creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"static")," folder inside your directory. Add ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," files and ",(0,o.kt)("inlineCode",{parentName:"p"},"ifc")," files into this folder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Adding Static Folder path, which will be used to store required files\napp.use(\"/static\", express.static('./static/'));\n")),(0,o.kt)("h4",{id:"socket"},"Socket"),(0,o.kt)("p",null,"We can consider Socket as data forwarder, whenever there is connection made to ",(0,o.kt)("strong",{parentName:"p"},"Server")," we will send out the camera position to other clients connected on network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{8,10}","{8,10}":!0},"// Connection Event which is triggered when someone enters their initials and is registered on network\nio.on('connection', (socket) => {\n    socket.on('username', (initials) => {\n        console.log('Connected User'+initials);\n    });\n\n    // When Client Camera is moved we will Emit this data to other Clients\n    socket.on('camera_move', (data) => {\n        data.id = socket.id;\n        io.emit('camera_move', data);\n    });\n\n    socket.on('disconnect', () => {\n        console.log('User Disconnected');\n    });\n})\n")),(0,o.kt)("h3",{id:"getting-user-initialsdetails"},"Getting User Initials/Details"),(0,o.kt)("p",null,"We will get User Initials from a basic ",(0,o.kt)("strong",{parentName:"p"},"form")," which will be created inside ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:"{4}","{4}":!0},'<div id="socket-connection-form">\n    <label for="initials-name">Enter Your Initials</label><br>\n    <input maxlength="2" type="text" id="initials-name" name="initials-name"><br>\n    <button id="socket-Connect-Button" onclick="connectToSocket()">Connect</button>\n</div>\n\n// Socket.IO creates a local client folder\n<script src="/socket.io/socket.io.js"><\/script>\n\n// Bundle File will be fetched from static folder    \n<script src="static/bundle.js"><\/script>\n')),(0,o.kt)("p",null,"When user clicks on ",(0,o.kt)("strong",{parentName:"p"},"Connect")," button a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"connectToSocket")," will be made which will create the connection."),(0,o.kt)("h3",{id:"getting-camera-position-and-sending-to-server"},"Getting Camera Position and Sending to Server"),(0,o.kt)("p",null,"Importing and Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"import {\n    CSS2DObject\n} from 'three/examples/jsm/renderers/CSS2DRenderer';\n\nlet socket;\n// To Store your Position\nlet clients = {}; \n// To Store the Positions of other user's Camera Location\nlet pointers = {};\n")),(0,o.kt)("p",null,"Once the button is clicked we need to Pass the Initials user has entered with ",(0,o.kt)("strong",{parentName:"p"},"Camera")," position, ",(0,o.kt)("strong",{parentName:"p"},"Initials")," will help to visualise the User's camera position as label created using ",(0,o.kt)("a",{href:"https://threejs.org/docs/#examples/en/renderers/CSS2DRenderer"},"CSS2DRenderer")),(0,o.kt)("p",null,"This code will be a little lengthy but trust us, it is easy!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'function connectToSocket() {\n    const initials = document.getElementById("initials-name").value;\n    console.log(initials)\n\n    if (initials) {\n        const connectButton = document.getElementById("socket-Connect-Button");\n        connectButton.innerHTML = "Connected!";\n        connectButton.disabled = true;\n\n        socket = io();\n        console.log(initials + ":Connecting to socket");\n        socket.emit(\'username\', initials);\n\n        socket.on(\'camera_move, function (data) {\n            if (!clients.hasOwnProperty(data.id)) {\n                // Creating a New Label when there are no previous Labels available\n                const labelDiv = document.createElement(\'div\');\n                labelDiv.className = \'label\';\n                labelDiv.textContent = data.initials;\n                labelDiv.style.marginTop = \'-1em\';\n\n                // Passing the Label div to CSS2DObject()\n                pointers[data.id] = new CSS2DObject(labelDiv);\n                pointers[data.id].position.set(data.x, data.y, data.z);\n                viewer.context.scene.add(pointers[data.id]);\n                pointers[data.id].layers.set(0);\n            }\n\n            // Updating the Label position according to new Data\n            pointers[data.id].position.set(data.x, data.y, data.z);\n\n            clients[data.id] = data;\n        });\n\n        // Updating Camera Position every time it is updated and sending it using emit()\n        viewer.context.ifcCamera.cameraControls.addEventListener(\'update\', e => {\n            const cameraPos = {\n                "initials": initials,\n                "id": "",\n                "x": viewer.context.getCamera().position.x,\n                "y": viewer.context.getCamera().position.y,\n                "z": viewer.context.getCamera().position.z\n            }\n\n            socket.emit(\'camera_move\', cameraPos);\n        })\n    }\n}\n')),(0,o.kt)("h3",{id:"little-styling"},"Little styling"),(0,o.kt)("p",null,"We will add basic styling for Connection form and Labels that will represent the position"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},".label \n{\n    color: #FFF;\n    font-family: sans-serif;\n    padding: 2px;\n    background: rgba( 0, 0, 0, .6 );\n}\n\n#socket-connection-form{\n    position: fixed;\n    top: 0;\n    right: 0;\n    padding: 20px;\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n    text-align: center;\n    width: 200px;\n    display: inline-block;\n    background: white;\n}\n#socket-connection-form>label{\n    font-size: 18px;\n    padding: 4px;\n    font-family: Arial, Helvetica, sans-serif;\n}\n#socket-connection-form>input{\n    margin-top: 10px;\n    font-size: 18px;\n    padding: 4px;\n    font-family: Arial, Helvetica, sans-serif;\n    width: 100%;\n    margin-bottom: 14px;\n}\n#socket-connection-form>button{\n    padding: 12px;\n    border: unset;\n    background: #f57c00;\n    border-radius: 8px;\n    width: 100%;\n    font-size: 18px;\n}\n#socket-connection-form>button:hover{\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n    transition: 0.2s;\n}\n")),(0,o.kt)("h2",{id:"the-result"},"The result"),(0,o.kt)("p",null,"\ud83d\udda5\ufe0f Here is an example of everything we've learned today: \ud83d\udda5\ufe0f"),(0,o.kt)("a",{href:"https://github.com/aka-blackboots/hello-world/tree/main/examples/web-ifc-viewer/socket-io/"},"Github repo"),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"\ud83c\udf89\ud83c\udf89\ud83c\udf89\nCongrats! Now you know how to use ",(0,o.kt)("strong",{parentName:"p"},"Socket.IO")," to share the User's Camera position, now you can perform variety of Operations and Share those over network!"))}u.isMDXComponent=!0}}]);