(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[602],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,g=d["".concat(s,".").concat(f)]||d[f]||u[f]||l;return n?i.createElement(g,o(o({ref:t},p),{},{components:n})):i.createElement(g,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var c=2;c<l;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3878:function(e,t,n){"use strict";n.d(t,{r:function(){return o}});var i=n(7294),r="icon_1PGw",l=n(9205),o=function(e){return i.createElement("div",{className:"alert alert--primary",role:"alert",style:{margin:"2rem"}},i.createElement("div",{className:r},i.createElement(l.A,{icon:"\ud83d\udca1",active:"true"})),e.children)}},983:function(e,t,n){"use strict";n.d(t,{M:function(){return a}});var i=n(7294),r=n(9205),l="titleOffset_2I3u",o="iconContainer_1xRA",a=function(e){var t=e.title?i.createElement("div",{className:"card__header"},i.createElement("span",{className:o},e.icon&&i.createElement(r.A,{icon:e.icon,link:e.link,active:"true"})),i.createElement("h3",{className:e.icon&&l},e.title)):"";return i.createElement("div",{className:"card-demo",style:{margin:"2rem"}},i.createElement("div",{className:"card"},t,i.createElement("div",{className:"card__body"},i.createElement("p",null," ",e.children," "))))}},9205:function(e,t,n){"use strict";n.d(t,{A:function(){return c}});var i=n(7294),r="hidden_2JtY",l="iconContainer_2Rnc",o="visible_2147",a="link_Lh4h",s="clickable_3vcc",c=function(e){var t=" "+(e.active?o:r),n=a+" "+(e.link&&s);return i.createElement("div",{className:l+t},i.createElement("a",{href:e.link,className:n},e.icon||"\ud83d\ude80"))}},6649:function(e,t,n){"use strict";n.d(t,{x:function(){return l}});var i=n(7294),r="threeScene_3QXR",l=function(e){return i.createElement("iframe",{className:r,width:"100%",height:"600px",key:Math.random(),src:e.link,frameBorder:"0"})}},9265:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return f}});var i=n(2122),r=n(9756),l=(n(7294),n(3905)),o=(n(983),n(3878)),a=n(6649),s=["components"],c={title:"\ud83d\uddc3\ufe0f IFC to gLTF",sidebar_position:3},p={unversionedId:"Guide/web-ifc-viewer/Tutorials/IFC to gLTF",id:"Guide/web-ifc-viewer/Tutorials/IFC to gLTF",isDocsHomePage:!1,title:"\ud83d\uddc3\ufe0f IFC to gLTF",description:"Introduction",source:"@site/docs/Guide/web-ifc-viewer/Tutorials/IFC to gLTF.mdx",sourceDirName:"Guide/web-ifc-viewer/Tutorials",slug:"/Guide/web-ifc-viewer/Tutorials/IFC to gLTF",permalink:"/info/zh/docs/Guide/web-ifc-viewer/Tutorials/IFC to gLTF",version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\uddc3\ufe0f IFC to gLTF",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udf10 Socket.IO",permalink:"/info/zh/docs/Guide/web-ifc-viewer/Tutorials/Socket"},next:{title:"\ud83e\udde0 Memory",permalink:"/info/zh/docs/Guide/web-ifc-viewer/Tutorials/Memory"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"Setting up the project",id:"setting-up-the-project",children:[]},{value:"1\ufe0f\u20e3 IFC to gLTF",id:"1\ufe0f\u20e3-ifc-to-gltf",children:[{value:"Importing Dependencies",id:"importing-dependencies",children:[]},{value:"Conversion",id:"conversion",children:[]},{value:"Let&#39;s try it",id:"lets-try-it",children:[]}]},{value:"2\ufe0f\u20e3 gLTF Viewer",id:"2\ufe0f\u20e3-gltf-viewer",children:[{value:"Loading gLTF files",id:"loading-gltf-files",children:[]},{value:"Creating Spatial Tree",id:"creating-spatial-tree",children:[]},{value:"Getting Properties",id:"getting-properties",children:[]},{value:"Lets try it",id:"lets-try-it-1",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],d={toc:u};function f(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"\u26a1\nweb-ifc-viewer is a 3D BIM viewer. From its vast set of tools, converting IFC to gLTF is one useful tool. This tutorial will guide you step by step how you can upload IFC file and get them converted to gLTF along with the relevant properties. "),(0,l.kt)("p",null,"You can find the complete source of the export functionality ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer/gltf-export"},"here")," and source code of import functionality ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer/gltf-import"},"here")),(0,l.kt)(o.r,{mdxType:"IfcAlert"},"Using IFC.js requires a basic knowledge of web development (HTML, CSS, JavaScript) and Three.js. If you have no previous experience with Three.js, you should probably look ",(0,l.kt)("a",{href:"https://threejs.org/manual/"},"here"),"."),(0,l.kt)("h2",{id:"setting-up-the-project"},"Setting up the project"),(0,l.kt)("p",null,"Before diving in deep, it is recommended that you have your ",(0,l.kt)("strong",{parentName:"p"},"Two Projects")," created one which will be used for ",(0,l.kt)("strong",{parentName:"p"},"Exporting IFC to gLTF")," and other for ",(0,l.kt)("strong",{parentName:"p"},"Viewing gLTF Files"),"."),(0,l.kt)("p",null,"You can use this ",(0,l.kt)("a",{parentName:"p",href:"https://ifcjs.github.io/info/docs/Guide/web-ifc-viewer/Introduction#setting-up-3d-scene-web-ifc-viewer"},"section"),". Don't worry! it is just boiler plate code for getting web-ifc-viewer running."),(0,l.kt)("p",null,"We will divide this tutorial into two sections as well, first for exporting and later for importing."),(0,l.kt)("h2",{id:"1\ufe0f\u20e3-ifc-to-gltf"},"1\ufe0f\u20e3 IFC to gLTF"),(0,l.kt)("h3",{id:"importing-dependencies"},"Importing Dependencies"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"   import {\n        IFCWALL,\n        IFCWALLSTANDARDCASE,\n        IFCSLAB,\n        IFCWINDOW,\n        IFCMEMBER,\n        IFCPLATE,\n        IFCCURTAINWALL,\n        IFCDOOR} from 'web-ifc'; \n")),(0,l.kt)("h3",{id:"conversion"},"Conversion"),(0,l.kt)("p",null,"The next step is to add function call ",(0,l.kt)("inlineCode",{parentName:"p"},"onchange")," of input in ",(0,l.kt)("inlineCode",{parentName:"p"},"app.js")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Whenever input tag is clicked upon we will call ",(0,l.kt)("inlineCode",{parentName:"li"},"loadIfc"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{2}","{2}":!0},"const input = document.getElementById('file-input');\ninput.onchange = loadIfc;\n\nasync function loadIfc(event) {\n    // IFC to gLTF conversion will happen here\n    ...\n    }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Next"),", we will work on conversion \ud83d\udd25"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Creating URL from File Object"),(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("inlineCode",{parentName:"li"},"exportIfcFileAsGltf")," and passing config to it to get relevant gLTF files."),(0,l.kt)("li",{parentName:"ul"},"If we pass ",(0,l.kt)("inlineCode",{parentName:"li"},"splitByFloors")," as true the ",(0,l.kt)("inlineCode",{parentName:"li"},"result")," we get will have gLTF files separated according to Floors."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"categories")," are used to get gLTF files for specific IFC elements, we will pass the imported ",(0,l.kt)("inlineCode",{parentName:"li"},"IFC types")," here."),(0,l.kt)("li",{parentName:"ul"},"Setting ",(0,l.kt)("inlineCode",{parentName:"li"},"getProperties")," as ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," generates a .json file which has the relevant properties stored in it."),(0,l.kt)("li",{parentName:"ul"},"Getting the outcome of ",(0,l.kt)("inlineCode",{parentName:"li"},"exportIfcFileAsGltf()")," in ",(0,l.kt)("inlineCode",{parentName:"li"},"result"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{5,7,15,26,30,35,36,44,45}","{5,7,15,26,30,35,36,44,45}":!0},"async function loadIfc(event) {\n    const file = event.target.files[0];\n    const url = URL.createObjectURL(file);\n\n    const result = await viewer.GLTF.exportIfcFileAsGltf({\n        ifcFileUrl: url,\n        splitByFloors: true,\n        categories: {\n            walls: [IFCWALL, IFCWALLSTANDARDCASE],\n            slabs: [IFCSLAB],\n            windows: [IFCWINDOW],\n            curtainwalls: [IFCMEMBER, IFCPLATE, IFCCURTAINWALL],\n            doors: [IFCDOOR]\n        },\n        getProperties: true\n    });\n\n    // Using Result and Downloading gLTF files\n\n    // Creating Link Tag\n    const link = document.createElement('a');\n    document.body.appendChild(link);\n\n    // Looping in result\n    for(const categoryName in result.gltf) {\n        const category = result.gltf[categoryName];\n\n        // Looping in Category according to Levels\n        for(const levelName in category) {\n            const file = category[levelName].file;\n\n            // If file is present for a level under category we will download it\n            if(file) {\n                // Downloading gLTF file in local machine\n                link.download = `${file.name}_${categoryName}_${levelName}.gltf`;\n                link.href = URL.createObjectURL(file);\n                link.click();\n            }\n        }\n    }\n\n    // We will check for Properties in result and download the JSON file for it\n    for(let jsonFile of result.json) {\n        link.download = `${jsonFile.name}.json`;\n        link.href = URL.createObjectURL(jsonFile);\n        link.click();\n    }\n\n    // Removing the Node created for link\n    link.remove();\n}\n")),(0,l.kt)("h3",{id:"lets-try-it"},"Let's try it"),(0,l.kt)("p",null,"If you did everything right, you should see something like below. This will download bunch of gLTF files."),(0,l.kt)(a.x,{link:"https://ifcjs.github.io/hello-world/examples/web-ifc-viewer/gltf-export/index.html",mdxType:"Scene"}),(0,l.kt)("h2",{id:"2\ufe0f\u20e3-gltf-viewer"},"2\ufe0f\u20e3 gLTF Viewer"),(0,l.kt)("p",null,"Now we have gLTF files and Properties file with us, we will use these files and show the model in ",(0,l.kt)("inlineCode",{parentName:"p"},"web-ifc-viewer"),". We will use another project for this. "),(0,l.kt)("h3",{id:"loading-gltf-files"},"Loading gLTF files"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Loading gLTF models using ",(0,l.kt)("inlineCode",{parentName:"li"},"viewer.GLTF.loadModel()")),(0,l.kt)("li",{parentName:"ul"},"Getting Properties from ",(0,l.kt)("inlineCode",{parentName:"li"},"properties.json")),(0,l.kt)("li",{parentName:"ul"},"Creating Spatial Tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{14,18,22}","{14,18,22}":!0},"let properties;\n\nasync function load() {\n    // Load geometry\n    await viewer.IFC.setWasmPath('../../../');\n    await viewer.GLTF.loadModel('../../../GLTF/doors_Nivel 1.gltf');\n    await viewer.GLTF.loadModel('../../../GLTF/slabs_Nivel 1.gltf');\n    await viewer.GLTF.loadModel('../../../GLTF/slabs_Nivel 2.gltf');\n    await viewer.GLTF.loadModel('../../../GLTF/walls_Nivel 1.gltf');\n    await viewer.GLTF.loadModel('../../../GLTF/windows_Nivel 1.gltf');\n    await viewer.GLTF.loadModel('../../../GLTF/curtainwalls_Nivel 1.gltf');\n\n    // Load properties\n    const rawProperties = await fetch('../../../GLTF/properties.json');\n    properties = await rawProperties.json();\n\n    // Get spatial tree\n    const tree = await constructSpatialTree();\n    console.log(tree);\n}\n\nload();\n")),(0,l.kt)("h3",{id:"creating-spatial-tree"},"Creating Spatial Tree"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Creating Project Node using Object of ",(0,l.kt)("inlineCode",{parentName:"li"},"IFCPROJECT")),(0,l.kt)("li",{parentName:"ul"},"Getting Relationships and contructing Spatial Tree Node and Passing back this structure"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"constructSpatialTreeNode")," is a recursive function which will be used to generate the data accordingly")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{4,7,13,14,16,22,27,31,59,67}","{4,7,13,14,16,22,27,31,59,67}":!0},"// Get spatial tree\nasync function constructSpatialTree() {\n    // Getting Project Properties \n    const ifcProject = getFirstItemOfType('IFCPROJECT');\n\n    // Creating Project Node\n    const ifcProjectNode = {\n        expressID: ifcProject.expressID,\n        type: 'IFCPROJECT',\n        children: [],\n    };\n\n    const relContained = getAllItemsOfType('IFCRELAGGREGATES');\n    const relSpatial = getAllItemsOfType('IFCRELCONTAINEDINSPATIALSTRUCTURE');\n\n    await constructSpatialTreeNode(\n        ifcProjectNode,\n        relContained,\n        relSpatial,\n    );\n\n    return ifcProjectNode;\n}\n\n// Utils functions\nfunction getFirstItemOfType(type) {\n    return Object.values(properties).find(item => item.type === type);\n}\n\nfunction getAllItemsOfType(type) {\n    return Object.values(properties).filter(item => item.type === type);\n}\n\n// Recursively constructs the spatial tree\nasync function constructSpatialTreeNode(\n    item,\n    contains,\n    spatials,\n) {\n    const spatialRels = spatials.filter(\n        rel => rel.RelatingStructure === item.expressID,\n    );\n    const containsRels = contains.filter(\n        rel => rel.RelatingObject === item.expressID,\n    );\n\n    const spatialRelsIDs = [];\n    spatialRels.forEach(rel => spatialRelsIDs.push(...rel.RelatedElements));\n\n    const containsRelsIDs = [];\n    containsRels.forEach(rel => containsRelsIDs.push(...rel.RelatedObjects));\n\n    const childrenIDs = [...spatialRelsIDs, ...containsRelsIDs];\n\n    const children = [];\n    // Looping through the child elements and creating populating values for it\n    for (let i = 0; i < childrenIDs.length; i++) {\n        const childID = childrenIDs[i];\n        const props = properties[childID];\n        const child = {\n            expressID: props.expressID,\n            type: props.type,\n            children: [],\n        };\n\n        // For Every child element repeating the step and pushing it to children array\n        await constructSpatialTreeNode(child, contains, spatials);\n        children.push(child);\n    }\n\n    item.children = children;\n}\n")),(0,l.kt)("h3",{id:"getting-properties"},"Getting Properties"),(0,l.kt)("p",null,"With major steps done, now we will get properties of elements on double click. Let's dive in!"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("inlineCode",{parentName:"li"},"id")," we will get the properties and then get property sets for it ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3,4,8,14}","{3,4,8,14}":!0},"window.ondblclick = async () => {\n    const result = await viewer.IFC.selector.pickIfcItem(true);\n    const foundProperties = properties[result.id];\n    getPropertySets(foundProperties);\n    console.log(foundProperties);\n};\n\nfunction getPropertySets(props) {\n    const id = props.expressID;\n    const propertyValues = Object.values(properties);\n    const allPsetsRels = propertyValues.filter(item => item.type === 'IFCRELDEFINESBYPROPERTIES');\n    const relatedPsetsRels = allPsetsRels.filter(item => item.RelatedObjects.includes(id));\n    const psets = relatedPsetsRels.map(item => properties[item.RelatingPropertyDefinition]);\n    for(let pset of psets) {\n        pset.HasProperty = pset.HasProperties.map(id => properties[id]);\n    }\n    props.psets = psets;\n}\n")),(0,l.kt)("h3",{id:"lets-try-it-1"},"Lets try it"),(0,l.kt)("p",null,"If everything went right, the output will look as below"),(0,l.kt)(a.x,{link:"https://ifcjs.github.io/hello-world/examples/web-ifc-viewer/gltf-import/index.html",mdxType:"Scene"}),(0,l.kt)("h2",{id:"conclusion"},"Conclusion"),(0,l.kt)("p",null,"\ud83c\udf89\nCongratulations! You have successfully exported IFC file as gLTF files and have a viewer for it. Go to the next pages of the docs to find out what else can you do with IFC.js."))}f.isMDXComponent=!0}}]);