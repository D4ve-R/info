(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[540],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=l,k=u["".concat(s,".").concat(c)]||u[c]||p[c]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},983:function(e,t,n){"use strict";n.d(t,{M:function(){return o}});var a=n(7294),l=n(9205),r="titleOffset_2I3u",i="iconContainer_1xRA",o=function(e){var t=e.title?a.createElement("div",{className:"card__header"},a.createElement("span",{className:i},e.icon&&a.createElement(l.A,{icon:e.icon,link:e.link,active:"true"})),a.createElement("h3",{className:e.icon&&r},e.title)):"";return a.createElement("div",{className:"card-demo",style:{margin:"2rem"}},a.createElement("div",{className:"card"},t,a.createElement("div",{className:"card__body"},a.createElement("p",null," ",e.children," "))))}},9205:function(e,t,n){"use strict";n.d(t,{A:function(){return m}});var a=n(7294),l="hidden_2JtY",r="iconContainer_2Rnc",i="visible_2147",o="link_Lh4h",s="clickable_3vcc",m=function(e){var t=" "+(e.active?i:l),n=o+" "+(e.link&&s);return a.createElement("div",{className:r+t},a.createElement("a",{href:e.link,className:n},e.icon||"\ud83d\ude80"))}},8469:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d},default:function(){return u}});var a=n(2122),l=n(9756),r=(n(7294),n(3905)),i=n(983),o=["components"],s={title:"web-ifc-API",sidebar_position:2},m={unversionedId:"Guide/web-ifc/web-ifc-API",id:"Guide/web-ifc/web-ifc-API",isDocsHomePage:!1,title:"web-ifc-API",description:"\ud83d\udcdc",source:"@site/docs/Guide/web-ifc/web-ifc-API.mdx",sourceDirName:"Guide/web-ifc",slug:"/Guide/web-ifc/web-ifc-API",permalink:"/info/ja/docs/Guide/web-ifc/web-ifc-API",version:"current",sidebarPosition:2,frontMatter:{title:"web-ifc-API",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcc3 Properties",permalink:"/info/ja/docs/Guide/web-ifc/Tutorials/Properties"},next:{title:"\u306f\u3058\u3081\u306b",permalink:"/info/ja/docs/Guide/web-ifc-three/Introduction"}},d=[{value:"IfcAPI",id:"ifcapi",children:[]},{value:"\u26a1 Setup",id:"-setup",children:[{value:"setWasmPath",id:"setwasmpath",children:[]}]},{value:"\ud83d\ude80 Tools",id:"-tools",children:[{value:"Init",id:"init",children:[]},{value:"OpenModel",id:"openmodel",children:[]},{value:"CreateModel",id:"createmodel",children:[]},{value:"ExportFileAsIFC",id:"exportfileasifc",children:[]},{value:"CreateIfcGuidToExpressIdMapping",id:"createifcguidtoexpressidmapping",children:[]},{value:"CloseModel",id:"closemodel",children:[]},{value:"IsModelOpen",id:"ismodelopen",children:[]},{value:"LoadAllGeometry",id:"loadallgeometry",children:[]},{value:"SetGeometryTransformation",id:"setgeometrytransformation",children:[]},{value:"StreamAllMeshes",id:"streamallmeshes",children:[]},{value:"StreamAllMeshesWithTypes",id:"streamallmesheswithtypes",children:[]},{value:"WriteLine",id:"writeline",children:[]},{value:"WriteRawLineData",id:"writerawlinedata",children:[]}]},{value:"\ud83e\udd0f Get",id:"\ud83e\udd0f-get",children:[{value:"GetAllLines",id:"getalllines",children:[]},{value:"GetAndClearErrors",id:"getandclearerrors",children:[]},{value:"GetCoordinationMatrix",id:"getcoordinationmatrix",children:[]},{value:"GetFlatMesh",id:"getflatmesh",children:[]},{value:"GetGeometry",id:"getgeometry",children:[]},{value:"GetIndexArray",id:"getindexarray",children:[]},{value:"GetLine",id:"getline",children:[]},{value:"GetLineIdsWithType",id:"getlineidswithtype",children:[]},{value:"GetRawLineData",id:"getrawlinedata",children:[]},{value:"getSubArray",id:"getsubarray",children:[]},{value:"GetVertexArray",id:"getvertexarray",children:[]}]}],p={toc:d};function u(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-multitude-of-things-you-can-do-with-web-ifc"},"The multitude of things you can do with web-ifc"),(0,r.kt)("p",null,"\ud83d\udcdc\nThe API is documented, so when you use any of the objects or methods listed in this documentation, you should see help from Intellisense, regardless of the IDE you're using."),(0,r.kt)("p",null,"\ud83d\udc23\nWe realize that with Intellisense or comments it is not the most comfortable. On this page we will give an overview of what the API can do. We can see it in operation in detail in the specific tutorials section below."),(0,r.kt)("h2",{id:"ifcapi"},"IfcAPI"),(0,r.kt)("p",null,"\ud83c\udf35\nWe import the object from the library. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileReader"),". Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { IfcAPI } from "web-ifc/web-ifc-api";\n\nconst IfcAPI = new IfcAPI();\nIfcAPI.SetWasmPath("../../../../");\n\nconst input = document.getElementById("file-input");\nIfcAPI.Init();\ninput.addEventListener("change", (changed) => {\n  const reader = new FileReader();\n  reader.onload = () => LoadFile(reader.result);\n  reader.readAsText(changed.target.files[0]);\n});\n\nasync function LoadFile(ifcAsText) {\n  const uint8array = new TextEncoder().encode(ifcAsText);\n  const modelID = await OpenIfc(uint8array);\n  const allItems = GetAllItems(modelID);\n  const result = JSON.stringify(allItems, undefined, 2);\n}\n\nasync function OpenIfc(ifcAsText) {\n  await IfcAPI.Init();\n  return IfcAPI.OpenModel(ifcAsText);\n}\n\nfunction GetAllItems(modelID, excludeGeometry = false) {\n  const allItems = {};\n  const lines = IfcAPI.GetAllLines(modelID);\n  getAllItemsFromLines(modelID, lines, allItems, excludeGeometry);\n  return allItems;\n}\n\nfunction getAllItemsFromLines(modelID, lines, allItems, excludeGeometry) {\n  for (let i = 1; i <= lines.size(); i++) {\n    try {\n      saveProperties(modelID, lines, allItems, excludeGeometry, i);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\nfunction saveProperties(modelID, lines, allItems, excludeGeometry, index) {\n  const itemID = lines.get(index);\n  const props = IfcAPI.GetLine(modelID, itemID);\n  props.type = props.__proto__.constructor.name;\n  if (!excludeGeometry || !geometryTypes.has(props.type)) {\n    allItems[itemID] = props;\n  }\n}\n')),(0,r.kt)("p",null,"\ud83c\udfa8\nLoad an ifc file and return all the information it contains in plain text"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const properties = IfcAPI.properties;\n")),(0,r.kt)("p",null,"\ud83e\uddf6\ud83e\uddf6\ud83e\uddf6\nThe IfcAPI class includes a property called ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," that contains all the logic and methods regarding ",(0,r.kt)("inlineCode",{parentName:"p"},"properties"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"psets"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"qsets"),", etc."),(0,r.kt)("h2",{id:"-setup"},"\u26a1 Setup"),(0,r.kt)("h3",{id:"setwasmpath"},"setWasmPath"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'IfcAPI.setWasmPath("../../../../");\n')),(0,r.kt)("p",null,"\ud83e\uddf0\nSpecifies the location of the web-ifc.wasm and web-ifc-mt.wasm files. These files are required to build any application with IFC.js. You can find them in node_modules/web-ifc/."),(0,r.kt)(i.M,{icon:" \ud83e\udd85 ",title:" Be careful with your tools!! ",mdxType:"IfcCard"},"If you use frameworks or libraries like React, Angular, Vue or Svelte it is possible that the root path of the project doesn't correspond to the root path of the served application. You will have to check in ",(0,r.kt)("a",{href:"https://github.com/IFCjs/examples"},"each case")," how the paths of the statically served files are managed."),(0,r.kt)("h4",{id:"arguments"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path"),": Route of ",(0,r.kt)("inlineCode",{parentName:"li"},"web-ifc.wasm"),".")),(0,r.kt)("h2",{id:"-tools"},"\ud83d\ude80 Tools"),(0,r.kt)("h3",{id:"init"},"Init"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.init(customLocateFileHandler: LocateFileHandlerFn)\n")),(0,r.kt)("h4",{id:"arguments-1"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"customLocateFileHandler"),": An optional locateFile function that let's you override the path from which the wasm module is loaded.")),(0,r.kt)("h4",{id:"example"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.Init();\n")),(0,r.kt)("p",null,"\ud83d\udea9\nInitializes the WASM module ",(0,r.kt)("inlineCode",{parentName:"p"},"WebIFCWasm"),", required before using any other functionality"),(0,r.kt)("h3",{id:"openmodel"},"OpenModel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.openModel(data: Uint8Array,\n                 settings: LoaderSettings): number\n")),(0,r.kt)("h4",{id:"arguments-2"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": Buffer containing IFC ",(0,r.kt)("inlineCode",{parentName:"li"},"data"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"settings"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"settings")," for loading the model.")),(0,r.kt)("h4",{id:"example-1"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.OpenModel(data, { LoaderSettings });\n")),(0,r.kt)("p",null,"\ud83d\udca3\nOpens a model and returns a modelID number"),(0,r.kt)("h3",{id:"createmodel"},"CreateModel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.CreateModel(settings: LoaderSettings): number\n")),(0,r.kt)("h4",{id:"arguments-3"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"settings"),": Creates a new model and returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"modelID")," number.")),(0,r.kt)("h4",{id:"example-2"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.CreateModel();\n")),(0,r.kt)("p",null,"\ud83c\udf89\nCreates a new model and returns a modelID number."),(0,r.kt)("h3",{id:"exportfileasifc"},"ExportFileAsIFC"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.ExportFileAsIFC(modelID: number): Uint8Array\n")),(0,r.kt)("h4",{id:"arguments-4"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),", model must no be closed.")),(0,r.kt)("h4",{id:"example-3"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.ExportFileAsIFC(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udc6c\nExports a file to IFC using the ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID"),". Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("h3",{id:"createifcguidtoexpressidmapping"},"CreateIfcGuidToExpressIdMapping"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.CreateIfcGuidToExpressIdMapping(modelID: number)\n")),(0,r.kt)("h4",{id:"arguments-5"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),".")),(0,r.kt)("h4",{id:"example-4"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const expressIdMapping = IfcAPI.CreateIfcGuidToExpressIdMapping(modelID);\n")),(0,r.kt)("p",null,"\ud83c\udfaf\nCreates a map between element ExpressIDs and GlobalIDs. Each element has two entries, (ExpressID -> GlobalID) and (GlobalID -> ExpressID)."),(0,r.kt)("h3",{id:"closemodel"},"CloseModel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.CloseModel(modelID: number)\n")),(0,r.kt)("h4",{id:"arguments-6"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),", model must not be closed")),(0,r.kt)("h4",{id:"example-5"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.CloseModel(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udd25\nCloses a model and frees all related memory"),(0,r.kt)("h3",{id:"ismodelopen"},"IsModelOpen"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.IsModelOpen(modelID: number): boolean\n")),(0,r.kt)("h4",{id:"arguments-7"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),".")),(0,r.kt)("h4",{id:"example-6"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.IsModelOpen(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udcaa\nChecks if a specific model ID is open or closed"),(0,r.kt)("h3",{id:"loadallgeometry"},"LoadAllGeometry"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.LoadAllGeometry(modelID: number): Vector\n")),(0,r.kt)("h4",{id:"arguments-8"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),".")),(0,r.kt)("h4",{id:"example-7"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.LoadAllGeometry(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udd25\nLoad geometry for a single element"),(0,r.kt)("h3",{id:"setgeometrytransformation"},"SetGeometryTransformation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.SetGeometryTransformation(modelID: number,\n                                  transformationMatrix: Array)\n")),(0,r.kt)("h4",{id:"arguments-9"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transformationMatrix")," : Use ",(0,r.kt)("inlineCode",{parentName:"li"},"transformationMatrix")," to encode transformations.")),(0,r.kt)("h4",{id:"example-8"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.SetGeometryTransformation(modelID, transformationMatrix);\n")),(0,r.kt)("p",null,"\ud83d\udc77\u200d\u2640\ufe0f\nConfigure the transformation of a geometry using ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"transformationMatrix")),(0,r.kt)("h3",{id:"streamallmeshes"},"StreamAllMeshes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.StreamAllMeshes(modelID: number,\n                      meshCallback:(mesh: FlatMesh))\n")),(0,r.kt)("h4",{id:"arguments-10"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"meshCallback"),": Use ",(0,r.kt)("inlineCode",{parentName:"li"},"mesh"),".")),(0,r.kt)("h4",{id:"example-9"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.StreamAllMeshes(modelID, (mesh) => {});\n")),(0,r.kt)("p",null,"\ud83c\udfb8\nCollect all ",(0,r.kt)("inlineCode",{parentName:"p"},"meshes")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"messCallback")),(0,r.kt)("h3",{id:"streamallmesheswithtypes"},"StreamAllMeshesWithTypes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.StreamAllMeshesWithTypes(modelID: number, types: Array<number>,\n                            meshCallback:(mesh: FlatMesh))\n")),(0,r.kt)("h4",{id:"arguments-11"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),",model must not be closed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"types")," : Select ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"meshCallback"),": Use ",(0,r.kt)("inlineCode",{parentName:"li"},"mesh"),".")),(0,r.kt)("h4",{id:"example-10"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.StreamAllMeshesWithTypes(modelID, types, meshCallback);\n")),(0,r.kt)("p",null,"\ud83c\udfbb\nCollect all ",(0,r.kt)("inlineCode",{parentName:"p"},"meshes")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"messCallback")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,r.kt)("h3",{id:"writeline"},"WriteLine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.WriteLine(modelID: number, lineObject: any)\n")),(0,r.kt)("h4",{id:"arguments-12"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lineObject"),": Selected ",(0,r.kt)("inlineCode",{parentName:"li"},"lineObject")," in a model.")),(0,r.kt)("h4",{id:"example-11"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.WriteLine(modelID, lineObject);\n")),(0,r.kt)("p",null,"\ud83e\ude95\nWrite a line using ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lineObject")),(0,r.kt)("h3",{id:"writerawlinedata"},"WriteRawLineData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.WriteRawLineData(modelID: number, data: RawLineData)\n")),(0,r.kt)("h4",{id:"arguments-13"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," : The raw ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," of each line")),(0,r.kt)("h4",{id:"example-12"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.WriteRawLineData(modelID);\n")),(0,r.kt)("p",null,"\u2728\nWrite a line data using ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"data")),(0,r.kt)("h2",{id:"\ud83e\udd0f-get"},"\ud83e\udd0f Get"),(0,r.kt)("h3",{id:"getalllines"},"GetAllLines"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetAllLines(modelID: Number): Vector\n")),(0,r.kt)("h4",{id:"arguments-14"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Express ID of model")),(0,r.kt)("h4",{id:"example-13"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetAllLines(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udcd5\nGet all the lines of a model by its modelID"),(0,r.kt)("h3",{id:"getandclearerrors"},"GetAndClearErrors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetAndClearErrors(modelID: number): Vector\n")),(0,r.kt)("h4",{id:"arguments-15"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Express ID of model")),(0,r.kt)("h4",{id:"example-14"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"return IfcAPI.GetAndClearErrors(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udcd2\nGet and clear errors using ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")),(0,r.kt)("h3",{id:"getcoordinationmatrix"},"GetCoordinationMatrix"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetCoordinationMatrix(modelID: number): Array\n")),(0,r.kt)("h4",{id:"arguments-16"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Express ID of model")),(0,r.kt)("h4",{id:"example-15"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetCoordinationMatrix(modelID);\n")),(0,r.kt)("p",null,"\ud83d\udcd8\nGet the coordinate of a matrix using ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID")),(0,r.kt)("h3",{id:"getflatmesh"},"GetFlatMesh"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetFlatMesh(modelID: number, expressID: number): FlatMesh\n")),(0,r.kt)("h4",{id:"arguments-17"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expressID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"expressID")," of model.")),(0,r.kt)("h4",{id:"example-16"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetFlatMesh(modelID, expressID);\n")),(0,r.kt)("p",null,"\ud83c\udf93\nLoad geometry for a single element"),(0,r.kt)("h3",{id:"getgeometry"},"GetGeometry"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetGeometry(modelID: number, geometryExpressID: number): IfcGeometry\n")),(0,r.kt)("h4",{id:"arguments-18"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"expressID")," of ifcModel"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"geometryExpressID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"expressID")," of geometry in ifcModel.")),(0,r.kt)("h4",{id:"example-17"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const geometry = IfcAPI.GetGeometry(modelID, geometryExpressID);\n")),(0,r.kt)("p",null,"\ud83d\udcd7\nGet ",(0,r.kt)("inlineCode",{parentName:"p"},"mesh")," geometry using a ",(0,r.kt)("inlineCode",{parentName:"p"},"modelID"),"."),(0,r.kt)("h3",{id:"getindexarray"},"GetIndexArray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetIndexArray(ptr: number, size: number): Uint32Array\n")),(0,r.kt)("h4",{id:"arguments-19"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ptr"),": Parameter of get."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size"),": Set ",(0,r.kt)("inlineCode",{parentName:"li"},"size"))),(0,r.kt)("h4",{id:"example-18"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetIndexArray();\n")),(0,r.kt)("p",null,"\ud83d\udcda\nGet ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"Array"),"using ",(0,r.kt)("inlineCode",{parentName:"p"},"ptr")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"size"),"."),(0,r.kt)("h3",{id:"getline"},"GetLine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetLine(modelID: number, expressID; number,\n                flatten: boolean)\n")),(0,r.kt)("h4",{id:"arguments-20"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expressID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"expressID")," of model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flatten"),": Set whether it is ",(0,r.kt)("inlineCode",{parentName:"li"},"flatten")," or not.")),(0,r.kt)("h4",{id:"example-19"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const props = IfcAPI.GetLine(modelID, id, (flatten = false));\n")),(0,r.kt)("p",null,"\u23e9\nGet the line using the modelID and expressID"),(0,r.kt)("h3",{id:"getlineidswithtype"},"GetLineIdsWithType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetLineIdsWithType(modelId: number, type: number): Vector\n")),(0,r.kt)("h4",{id:"arguments-21"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"expressID")," of ifcModel"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": Set of get ",(0,r.kt)("inlineCode",{parentName:"li"},"type"))),(0,r.kt)("h4",{id:"example-20"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const lines = IfcAPI.GetLineIDsWithType(modelID, type);\n")),(0,r.kt)("p",null,"\ud83e\uddfb\nDefines the type to get"),(0,r.kt)("h3",{id:"getrawlinedata"},"GetRawLineData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetRawLineData(modelID: number, expressID: number): RawLineData\n")),(0,r.kt)("h4",{id:"arguments-22"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modelID"),": Model handle retrieved by ",(0,r.kt)("inlineCode",{parentName:"li"},"OpenModel"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expressID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"expressID")," of model.")),(0,r.kt)("h4",{id:"example-21"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const rawLineData = IfcAPI.GetRawLineData(modelID, expressID);\n")),(0,r.kt)("p",null,"\ud83d\udcc1\nGet a line of raw data using \xb4modelID",(0,r.kt)("inlineCode",{parentName:"p"},"and"),"expressID`"),(0,r.kt)("h3",{id:"getsubarray"},"getSubArray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.getSubArray(heap: any, startPtr: any,\n                    sizeBytes: any)\n")),(0,r.kt)("h4",{id:"arguments-23"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"heap"),": Set to ",(0,r.kt)("inlineCode",{parentName:"li"},"stack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startPtr"),": Set to ",(0,r.kt)("inlineCode",{parentName:"li"},"startPtr")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"subArray")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sizeBytes"),": Set to ",(0,r.kt)("inlineCode",{parentName:"li"},"sizeBytes"))),(0,r.kt)("h4",{id:"example-22"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const subArray = IfcAPI.getSubArray(heap, startPtr, sizeBytes);\n")),(0,r.kt)("p",null,"\ud83d\udcdd\nGet a ",(0,r.kt)("inlineCode",{parentName:"p"},"subArray")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")),(0,r.kt)("h3",{id:"getvertexarray"},"GetVertexArray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"IfcAPI.GetVertexArray(ptr: number, size: number): Float32Array\n")),(0,r.kt)("h4",{id:"arguments-24"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ptr"),": Set parameter of get."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size"),": Set to ",(0,r.kt)("inlineCode",{parentName:"li"},"size"),".")),(0,r.kt)("h4",{id:"example-23"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const vertexArray = IfcAPI.GetVertexArray(ptr, size);\n")),(0,r.kt)("p",null,"\u261d\nGet the ",(0,r.kt)("inlineCode",{parentName:"p"},"vertex")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")))}u.isMDXComponent=!0}}]);