(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7606],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return u}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=c(n),u=a,m=h["".concat(s,".").concat(u)]||h[u]||p[u]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3878:function(e,t,n){"use strict";n.d(t,{r:function(){return o}});var i=n(7294),a="icon_1PGw",r=n(9205),o=function(e){return i.createElement("div",{className:"alert alert--primary",role:"alert",style:{margin:"2rem"}},i.createElement("div",{className:a},i.createElement(r.A,{icon:"\ud83d\udca1",active:"true"})),e.children)}},983:function(e,t,n){"use strict";n.d(t,{M:function(){return l}});var i=n(7294),a=n(9205),r="titleOffset_2I3u",o="iconContainer_1xRA",l=function(e){var t=e.title?i.createElement("div",{className:"card__header"},i.createElement("span",{className:o},e.icon&&i.createElement(a.A,{icon:e.icon,link:e.link,active:"true"})),i.createElement("h3",{className:e.icon&&r},e.title)):"";return i.createElement("div",{className:"card-demo",style:{margin:"2rem"}},i.createElement("div",{className:"card"},t,i.createElement("div",{className:"card__body"},i.createElement("p",null," ",e.children," "))))}},9205:function(e,t,n){"use strict";n.d(t,{A:function(){return c}});var i=n(7294),a="hidden_2JtY",r="iconContainer_2Rnc",o="visible_2147",l="link_Lh4h",s="clickable_3vcc",c=function(e){var t=" "+(e.active?o:a),n=l+" "+(e.link&&s);return i.createElement("div",{className:r+t},i.createElement("a",{href:e.link,className:n},e.icon||"\ud83d\ude80"))}},6649:function(e,t,n){"use strict";n.d(t,{x:function(){return r}});var i=n(7294),a="threeScene_3QXR",r=function(e){return i.createElement("iframe",{className:a,width:"100%",height:"600px",key:Math.random(),src:e.link,frameBorder:"0"})}},9860:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return d},metadata:function(){return p},toc:function(){return h},default:function(){return m}});var i=n(2122),a=n(9756),r=(n(7294),n(3905)),o=n(983),l=n(3878),s=n(6649),c=["components"],d={title:"Hello world",sidebar_position:4},p={unversionedId:"Hello world",id:"Hello world",isDocsHomePage:!1,title:"Hello world",description:"Introduction",source:"@site/docs/Hello world.mdx",sourceDirName:".",slug:"/Hello world",permalink:"/info/docs/Hello world",version:"current",sidebarPosition:4,frontMatter:{title:"Hello world",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"IFC for developers",permalink:"/info/docs/Courses/Ifc-course"},next:{title:"Getting started",permalink:"/info/docs/Guide/Getting started"}},h=[{value:"Introduction",id:"introduction",children:[]},{value:"Setting up the project",id:"setting-up-the-project",children:[{value:"Install libraries",id:"install-libraries",children:[]},{value:"Adding style",id:"adding-style",children:[]},{value:"Bundling",id:"bundling",children:[]},{value:"WebAssembly",id:"webassembly",children:[]}]},{value:"Setting up a 3D scene",id:"setting-up-a-3d-scene",children:[]},{value:"Loading IFC files",id:"loading-ifc-files",children:[{value:"Loading user&#39;s models",id:"loading-users-models",children:[]},{value:"Loading our models",id:"loading-our-models",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],u={toc:h};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"\u26a1\nCreating a BIM application with IFC.js is very easy. You can find the complete project of the guide ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-three/helloworld"},"here")," and the deployed application ",(0,r.kt)("a",{parentName:"p",href:"https://ifcjs.github.io/hello-world/examples/web-ifc-three/helloworld/"},"here"),". You only need to have ",(0,r.kt)("a",{href:"https://nodejs.org/en/"},"Node.js")," and any IDE installed to follow the steps below. Also, if you don't have any IFC files to follow along, you can get some ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/test-ifc-files"},"here"),"."),(0,r.kt)("p",null,'{" "}'),(0,r.kt)(l.r,{mdxType:"IfcAlert"},"Using IFC.js requires a basic knowledge of web development (HTML, CSS, JavaScript) and Three.js. If you have no previous experience with Three.js, you should probably look ",(0,r.kt)("a",{href:"https://threejs.org/manual/"},"here"),"."),(0,r.kt)("p",null,"\ud83d\udc23\nThis minimal tutorial will be done with Vanilla JavaScript, without using frameworks like React, Vue, Angular, Svelte, etc. However, the same steps can be adapted and applied to any of these use cases."),(0,r.kt)("h2",{id:"setting-up-the-project"},"Setting up the project"),(0,r.kt)("h3",{id:"install-libraries"},"Install libraries"),(0,r.kt)("p",null,"\ud83d\udc69\u200d\ud83c\udfeb\nThe first thing to do is to create an empty folder and start a new npm project with the command ",(0,r.kt)("inlineCode",{parentName:"p"},"npm init"),". This will generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file containing some data such as the project name, version, commands and dependencies. In addition, the following dependencies must be installed with npm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    //Install IFC.js\n    npm i web-ifc-three\n\n    // Install Three.js\n    npm i three\n\n    // Install a bundler: we will use rollup.js for this guide\n    npm i rollup --save-dev\n    npm i @rollup/plugin-node-resolve --save-dev\n")),(0,r.kt)("p",null,"\ud83d\udcdd\nThe next step is to create an HTML file named ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," as the main document of the application. The HTML will have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"canvas element"),", used to render the Three.js scene."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("strong",{parentName:"li"},"input element"),", which will open IFC files from our computer to the application."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"script")," referencing a file called ",(0,r.kt)("inlineCode",{parentName:"li"},"bundle.js"),", which is the bundle of the app that we will produce with rollup.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <link rel="stylesheet" href="styles.css" />\n    <title>Document</title>\n  </head>\n  <body>\n    <input type="file" name="load" id="file-input" />\n    <canvas id="three-canvas"></canvas>\n    <script src="bundle.js"><\/script>\n  </body>\n</html>\n')),(0,r.kt)("h3",{id:"adding-style"},"Adding style"),(0,r.kt)("p",null,"\ud83c\udfa8\nThe following CSS file will make the canvas full screen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  overflow: hidden;\n}\n\n#three-canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  outline: none;\n}\n\n#file-input {\n  z-index: 1;\n  position: absolute;\n}\n")),(0,r.kt)("h3",{id:"bundling"},"Bundling"),(0,r.kt)("p",null,"Next, we'll create the rollup configuration file. This file has to be called ",(0,r.kt)("inlineCode",{parentName:"p"},"rollup.config.js")," and includes the reference to the plugins we have previously installed."),(0,r.kt)("p",null,'{" "}'),(0,r.kt)(o.M,{icon:"\ud83e\uddfb",title:"Rollup?",mdxType:"IfcCard"},"Rollup is a very popular bundling library. For instance, it's the bundler used by Three.js. Take a look at the ",(0,r.kt)("a",{href:"https://rollupjs.org/guide/en/"},"rollup docs")," to learn more."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import resolve from "@rollup/plugin-node-resolve";\n\nexport default {\n  input: "src/app.js",\n  output: [\n    {\n      format: "esm",\n      file: "src/bundle.js",\n    },\n  ],\n  plugins: [resolve()],\n};\n')),(0,r.kt)("p",null,"\ud83c\udfaf\nAlso, the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file needs to be modified to contain the commands to control rollup easily. In each command, you'll have to specify the relative path to your rollup configuration file. If we have installed everything correctly, we should see the same dependencies in this file (the version of the libraries may differ)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"npm run build")," will bundle the project and create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"bundle.js")," in the root directory of the project.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"npm run watch")," will activate the ",(0,r.kt)("inlineCode",{parentName:"p"},"watch mode"),", updating that file automatically every time we make changes to the code and save it."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "example",\n  "version": "1.0.0",\n  "description": "-",\n  "main": "app.js",\n  "scripts": {\n    "build": "rollup -c ./rollup.config.js",\n    "watch": "rollup -w -c ./rollup.config.js"\n  },\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "@rollup/plugin-node-resolve": "^11.2.1",\n    "rollup": "^2.45.2"\n  },\n  "dependencies": {\n    "three": "^0.128.0",\n    "web-ifc-three": "0.0.102"\n  }\n}\n')),(0,r.kt)("h3",{id:"webassembly"},"WebAssembly"),(0,r.kt)("p",null,"\ud83d\udcc1\nThe next thing to do is to copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"web-ifc.wasm")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"web-ifc-mt.wasm")," files to a directory in your project. It can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules\\web-ifc")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules\\three\\examples\\jsm\\loaders\\ifc")," if you are only using Three's IFCLoader). We can copy them wherever we want; in this example, they will be copied to a folder called wasm in the root directory of the project."),(0,r.kt)("p",null,"These files are necessary because they contain the compiled C++ logic of ",(0,r.kt)("a",{href:"https://github.com/IFCjs/web-ifc"},"web-ifc"),", which is the parsing core to read and write IFC files with native speed."),(0,r.kt)("p",null,'{" "}'),(0,r.kt)(l.r,{mdxType:"IfcAlert"},"These files have to be served statically in your application. This might need different tweaks if you are using frameworks or libraries like React, Angular, Vue or Svelte."),(0,r.kt)("h2",{id:"setting-up-a-3d-scene"},"Setting up a 3D scene"),(0,r.kt)("p",null,"Finally, we are going to create the JavaScript file to write the code for our application. This file can be located anywhere and have any name, but you must reflect this in the ",(0,r.kt)("inlineCode",{parentName:"p"},"rollup.config.js"),"."),(0,r.kt)("p",null,"\ud83e\uddf1\nWe are going to create a basic 3D scene using Three.js."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { AmbientLight, AxesHelper, DirectionalLight, GridHelper, PerspectiveCamera, Scene, WebGLRenderer } from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls";\n\n//Creates the Three.js scene\nconst scene = new Scene();\n\n//Object to store the size of the viewport\nconst size = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n//Creates the camera (point of view of the user)\nconst aspect = size.width / size.height;\nconst camera = new PerspectiveCamera(75, aspect);\ncamera.position.z = 15;\ncamera.position.y = 13;\ncamera.position.x = 8;\n\n//Creates the lights of the scene\nconst lightColor = 0xffffff;\n\nconst ambientLight = new AmbientLight(lightColor, 0.5);\nscene.add(ambientLight);\n\nconst directionalLight = new DirectionalLight(lightColor, 1);\ndirectionalLight.position.set(0, 10, 0);\ndirectionalLight.target.position.set(-5, 0, 0);\nscene.add(directionalLight);\nscene.add(directionalLight.target);\n\n//Sets up the renderer, fetching the canvas of the HTML\nconst threeCanvas = document.getElementById("three-canvas");\nconst renderer = new WebGLRenderer({\n  canvas: threeCanvas,\n  alpha: true,\n});\n\nrenderer.setSize(size.width, size.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n//Creates grids and axes in the scene\nconst grid = new GridHelper(50, 30);\nscene.add(grid);\n\nconst axes = new AxesHelper();\naxes.material.depthTest = false;\naxes.renderOrder = 1;\nscene.add(axes);\n\n//Creates the orbit controls (to navigate the scene)\nconst controls = new OrbitControls(camera, threeCanvas);\ncontrols.enableDamping = true;\ncontrols.target.set(-2, 0, 0);\n\n//Animation loop\nconst animate = () => {\n  controls.update();\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n};\n\nanimate();\n\n//Adjust the viewport to the size of the browser\nwindow.addEventListener("resize", () => {\n  size.width = window.innerWidth;\n  size.height = window.innerHeight;\n  camera.aspect = size.width / size.height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(size.width, size.height);\n});\n')),(0,r.kt)("p",null,"\ud83c\udf0f\nTo run the application locally we will need a local server. If you are using VS Code as IDE, one option is to install the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"},"Live Server extension"),", which allows us to open an instance of Google Chrome, run our web application and see the changes we make to the code in real-time."),(0,r.kt)("h2",{id:"loading-ifc-files"},"Loading IFC files"),(0,r.kt)("h3",{id:"loading-users-models"},"Loading user's models"),(0,r.kt)("p",null,"\ud83c\udfe0\nFinally, we will use IFC.js to load IFC files. This can be done by instantiating the loader and creating an event for when the user uploads an IFC file to the HTML input element."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { IFCLoader } from "web-ifc-three/IFCLoader";\n\n// Sets up the IFC loading\nconst ifcLoader = new IFCLoader();\n\nconst input = document.getElementById("file-input");\ninput.addEventListener(\n  "change",\n  (changed) => {\n    const file = changed.target.files[0];\n    var ifcURL = URL.createObjectURL(file);\n    ifcLoader.load(ifcURL, (ifcModel) => scene.add(ifcModel));\n  },\n  false\n);\n')),(0,r.kt)("p",null,"\ud83c\udfa3\nKeep in mind that if you haven't saved the wasm files in the root of served files of the project, you'll need to specify its location with ",(0,r.kt)("inlineCode",{parentName:"p"},"setWasmPath"),". For instance, if we had them stored in a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm")," contained in a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," in the root of the project, we would do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ifcLoader.ifcManager.setWasmPath("static/wasm/");\n')),(0,r.kt)(s.x,{link:"https://ifcjs.github.io/hello-world/examples/web-ifc-three/helloworld/",mdxType:"Scene"}),(0,r.kt)("p",null,"If you have done everything correctly, you should be able to see something similar to ",(0,r.kt)("a",{parentName:"p",href:"https://ifcjs.github.io/hello-world/examples/web-ifc-three/helloworld/"},"this")," in your local server. From here, the possibilities are endless."),(0,r.kt)("h3",{id:"loading-our-models"},"Loading our models"),(0,r.kt)("p",null,"\ud83e\udd14\nIn the previous point we saw how to load BIM models directly, and that's great. What if we want to show our BIM models instead of allowing the user to upload theirs? This is very simple. Generally there are two possibilities:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Having the IFC in the same application where you want to display it.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Having to get it from an external storage service."),(0,r.kt)("p",{parentName:"li"},'\ud83c\udfa9\nIn the first case, it is sufficient to reference the URL of the IFC file. That is, its relative path in the application. For example, if the IFC is in a folder called "models" in the root of the project, we could load that IFC when starting the application as follows:'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ifcLoader.load("models/Example_model.ifc", (ifcModel) => scene.add(ifcModel));\n')),(0,r.kt)(l.r,{mdxType:"IfcAlert"},"Getting a file from a remote storage service varies depending on the service used. However, the logic is the same: get the information, create a URL and pass it as an argument to the IFCLoader."),(0,r.kt)(s.x,{link:"https://ifcjs.github.io/hello-world/examples/web-ifc-three/introduction/",mdxType:"Scene"}),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"\ud83c\udf89\nCongratulations! You have just created your first IFC viewer. Go to the next pages of the docs to find out what else can you do with IFC.js."),(0,r.kt)("p",null,'{" "}'),(0,r.kt)(o.M,{icon:"\ud83d\udd25",title:"What else can I do with IFC.js?",mdxType:"IfcCard"},"This is just the beginning. You can take a look at ",(0,r.kt)("a",{href:"https://github.com/IFCjs/web-ifc-viewer"},"web-ifc-viewer"),", which includes tools for object selection, changing geometry appearance, section planes and much more. You can try it ",(0,r.kt)("a",{href:"https://ifcjs.github.io/web-ifc-viewer/example/index"},"here"),"."))}m.isMDXComponent=!0}}]);