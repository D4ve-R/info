(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[265],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3878:function(e,t,n){"use strict";n.d(t,{r:function(){return i}});var a=n(7294),r="icon_1PGw",o=n(9205),i=function(e){return a.createElement("div",{className:"alert alert--primary",role:"alert",style:{margin:"2rem"}},a.createElement("div",{className:r},a.createElement(o.A,{icon:"\ud83d\udca1",active:"true"})),e.children)}},983:function(e,t,n){"use strict";n.d(t,{M:function(){return s}});var a=n(7294),r=n(9205),o="titleOffset_2I3u",i="iconContainer_1xRA",s=function(e){var t=e.title?a.createElement("div",{className:"card__header"},a.createElement("span",{className:i},e.icon&&a.createElement(r.A,{icon:e.icon,link:e.link,active:"true"})),a.createElement("h3",{className:e.icon&&o},e.title)):"";return a.createElement("div",{className:"card-demo",style:{margin:"2rem"}},a.createElement("div",{className:"card"},t,a.createElement("div",{className:"card__body"},a.createElement("p",null," ",e.children," "))))}},9205:function(e,t,n){"use strict";n.d(t,{A:function(){return c}});var a=n(7294),r="hidden_2JtY",o="iconContainer_2Rnc",i="visible_2147",s="link_Lh4h",l="clickable_3vcc",c=function(e){var t=" "+(e.active?i:r),n=s+" "+(e.link&&l);return a.createElement("div",{className:o+t},a.createElement("a",{href:e.link,className:n},e.icon||"\ud83d\ude80"))}},6649:function(e,t,n){"use strict";n.d(t,{x:function(){return o}});var a=n(7294),r="threeScene_3QXR",o=function(e){return a.createElement("iframe",{className:r,width:"100%",height:"600px",key:Math.random(),src:e.link,frameBorder:"0"})}},4402:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},metadata:function(){return p},toc:function(){return u},default:function(){return h}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=n(983),s=n(3878),l=n(6649),c=["components"],m={title:"\ud83e\udde0 Memory",sidebar_position:5},p={unversionedId:"Guide/web-ifc-three/Tutorials/Memory",id:"Guide/web-ifc-three/Tutorials/Memory",isDocsHomePage:!1,title:"\ud83e\udde0 Memory",description:"Introduction",source:"@site/docs/Guide/web-ifc-three/Tutorials/Memory.mdx",sourceDirName:"Guide/web-ifc-three/Tutorials",slug:"/Guide/web-ifc-three/Tutorials/Memory",permalink:"/info/docs/Guide/web-ifc-three/Tutorials/Memory",version:"current",sidebarPosition:5,frontMatter:{title:"\ud83e\udde0 Memory",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc53 Hiding",permalink:"/info/docs/Guide/web-ifc-three/Tutorials/Hiding"},next:{title:"\ud83d\ude80 Multithreading",permalink:"/info/docs/Guide/web-ifc-three/Tutorials/AdvancedLoading"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"How to do it",id:"how-to-do-it",children:[{value:"Monitoring the memory",id:"monitoring-the-memory",children:[]},{value:"Dispose memory",id:"dispose-memory",children:[]},{value:"Set up simple GUI",id:"set-up-simple-gui",children:[]},{value:"SPA",id:"spa",children:[]}]},{value:"Next steps",id:"next-steps",children:[]}],d={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"\ud83d\udced\ud83d\udceb\nOn many occasions we will want to create applications that are able to ",(0,o.kt)("strong",{parentName:"p"},"open and close BIM viewers"),". Although this may seem obvious, there is a problem: ",(0,o.kt)("strong",{parentName:"p"},"memory management"),"."),(0,o.kt)("p",null,"\ud83e\udd14\nNow many will be scratching their heads, since memory management is not a common issue in web applications. JavaScript and other modern languages have ",(0,o.kt)("strong",{parentName:"p"},"automatic memory management / garbage collector"),", so the programmer doesn't have to worry about freeing up objects and arrays."),(0,o.kt)("p",null,"\u270d\ud83e\udd16\u2753\nHowever, when working with Three.js, data going to the graphics card (e.g. buffers) is ",(0,o.kt)("strong",{parentName:"p"},"not affected by this automatic memory management"),"."),(0,o.kt)("p",null,"\ud83e\udd15\nThat means that if we close a viewer made with Three.js (with or without IFC.js), we will create a \ud83d\udca6 ",(0,o.kt)("strong",{parentName:"p"},"memory leak")," \ud83d\udca6. That is to say, we are blocking a part of the user's RAM memory. If the leak becomes too big, the application will become slower and slower and may ",(0,o.kt)("strong",{parentName:"p"},"crash"),"."),(0,o.kt)(s.r,{mdxType:"IfcAlert"},"You can find more information about this topic ",(0,o.kt)("a",{href:"https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects"},"here"),"."),(0,o.kt)("p",null,"\ud83d\ude80\nThis becomes especially critical if we are creating a ",(0,o.kt)("strong",{parentName:"p"},"SPA")," (",(0,o.kt)("strong",{parentName:"p"},"Single Page Application"),"), for example, using frameworks and libraries such as ",(0,o.kt)("strong",{parentName:"p"},"React or "),"Angular","*","*",". In these cases the web application is never reloaded, and the memory leak accumulates."),(0,o.kt)("p",null,"Fortunately, IFC.js has taken this into account and allows you to ",(0,o.kt)("strong",{parentName:"p"},"release the used memory very easily"),". Let's see how. \ud83d\udc47"),(0,o.kt)(i.M,{mdxType:"IfcCard"},"You can find the full example of this tutorial ",(0,o.kt)("a",{href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-three/memory"},"here"),"."),(0,o.kt)("h2",{id:"how-to-do-it"},"How to do it"),(0,o.kt)("h3",{id:"monitoring-the-memory"},"Monitoring the memory"),(0,o.kt)("p",null,"\ud83d\udc40\nThe first question you probably have if you haven't worked much with Three.js optimized scenes is ",(0,o.kt)("strong",{parentName:"p"},"how to see how much memory your application consumes"),". Otherwise, it is impossible to detect memory leaks."),(0,o.kt)("p",null,"\ud83c\udf0d\nThere are several ways to do this. The first is to use the ",(0,o.kt)("strong",{parentName:"p"},"developer tools"),' of the browser you are using. For example, in Google Chrome there is a section called "Memory" where you can take snapshots and see how much memory the current tab is consuming.'),(0,o.kt)("p",null,"\ud83e\udd16\nHowever, a more convenient way is to use the library ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mrdoob/stats.js/"},"stats.js"),". This library allows to ",(0,o.kt)("strong",{parentName:"p"},"monitor the performance and memory")," of a Three.js application. It can be installed with ",(0,o.kt)("inlineCode",{parentName:"p"},"npm i stats.js")," and can be used as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Stats\nconst stats = new Stats();\nstats.showPanel(2);\ndocument.body.append(stats.dom);\n\n// Animation loop\nconst animate = () => {\n  stats.begin();\n\n  // Update other stuff\n  stats.end();\n  requestAnimationFrame(animate);\n};\n\nanimate();\n")),(0,o.kt)("p",null,"\ud83d\udccb\nThis will bring up the ",(0,o.kt)("strong",{parentName:"p"},"scene statistics during execution"),". By clicking on them we can toggle between performance and memory usage of the app."),(0,o.kt)("h3",{id:"dispose-memory"},"Dispose memory"),(0,o.kt)("p",null,"\u270c\nNow let's create a function that removes all the memory consumed by IFC.js. There are 2 things to keep in mind:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we have specified the ",(0,o.kt)("strong",{parentName:"p"},"path to the WASM files")," previously, we will have to do it again in the new instance of web-ifc-three.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This one is important: if we have stored a reference to the loaded IFC models in an array, an object or a class, ",(0,o.kt)("strong",{parentName:"p"},"we have to delete them manually"),". Otherwise, the memory will not be freed."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'async function releaseMemory() {\n  // This releases all IFCLoader memory\n  await ifcLoader.ifcManager.dispose();\n  ifcLoader = null;\n  ifcLoader = new IFCLoader();\n\n  // If the wasm path was set before, we need to reset it\n  await ifcLoader.ifcManager.setWasmPath("../../../");\n\n  // If IFC models are an array or object,\n  // you must release them there as well\n  // Otherwise, they won\'t be garbage collected\n  models.length = 0;\n}\n')),(0,o.kt)("h3",{id:"set-up-simple-gui"},"Set up simple GUI"),(0,o.kt)("p",null,"\ud83d\udc85\nFinally, we are going to create an HTML button and link it to the function we created earlier."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<input type="button" id="memory-button" value="Release memory" />\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Sets up memory disposal\nconst button = document.getElementById("memory-button");\nbutton.addEventListener(`click`, () => releaseMemory());\n')),(0,o.kt)("p",null,"\ud83d\ude0e This is how the application looks like:"),(0,o.kt)(l.x,{link:"https://ifcjs.github.io/hello-world/examples/web-ifc-three/memory/index.html",mdxType:"Scene"}),(0,o.kt)("p",null,"Try loading a model and releasing the memory: you'll see it go back to normal. Beware that ",(0,o.kt)("strong",{parentName:"p"},"it can take some seconds"),", as the browser garbage collector takes some time. Alternatively, you can manually apply the garbage collector using the browser's developer tools."),(0,o.kt)("h3",{id:"spa"},"SPA"),(0,o.kt)("p",null,"\ud83c\udf08\nIt is very common to create ",(0,o.kt)("strong",{parentName:"p"},"SPA")," or ",(0,o.kt)("strong",{parentName:"p"},"Single Page Applications")," because they are more efficient and require less communication with the backend. Examples of tools to make these applications are ",(0,o.kt)("strong",{parentName:"p"},"React"),", ",(0,o.kt)("strong",{parentName:"p"},"Angular"),", ",(0,o.kt)("strong",{parentName:"p"},"Vue"),", etc."),(0,o.kt)("p",null,"\ud83d\udc76\ud83d\udc74\nIn many cases ",(0,o.kt)("strong",{parentName:"p"},"these tools manage the lifecycle of the application components automatically"),". For example, when the user closes the 3d view, the HTML element containing the view is automatically destroyed."),(0,o.kt)("p",null,"\ud83d\udea7\ud83d\udea7\ud83d\udea7\nTo avoid memory leaks, it will be necessary to ",(0,o.kt)("strong",{parentName:"p"},"free the application memory as seen in this tutorial each time the component containing the 3D view is destroyed"),". In many cases there are hooks or similar mechanisms to execute this logic automatically each time the component is destroyed."),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"\ud83c\udf89\ud83c\udf89\ud83c\udf89\nCongratulations! You now know how to manage the memory of the BIM applications you create with IFC.js, so your applications will be 100% free of memory leaks."),(0,o.kt)("p",null,"\ud83d\udcaa\nNext we are going to look at some advanced model loading tools, such as multithreading and load process event."))}h.isMDXComponent=!0}}]);