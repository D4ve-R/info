(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[691],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3878:function(e,t,n){"use strict";n.d(t,{r:function(){return i}});var r=n(7294),o="icon_1PGw",a=n(9205),i=function(e){return r.createElement("div",{className:"alert alert--primary",role:"alert",style:{margin:"2rem"}},r.createElement("div",{className:o},r.createElement(a.A,{icon:"\ud83d\udca1",active:"true"})),e.children)}},983:function(e,t,n){"use strict";n.d(t,{M:function(){return l}});var r=n(7294),o=n(9205),a="titleOffset_2I3u",i="iconContainer_1xRA",l=function(e){var t=e.title?r.createElement("div",{className:"card__header"},r.createElement("span",{className:i},e.icon&&r.createElement(o.A,{icon:e.icon,link:e.link,active:"true"})),r.createElement("h3",{className:e.icon&&a},e.title)):"";return r.createElement("div",{className:"card-demo",style:{margin:"2rem"}},r.createElement("div",{className:"card"},t,r.createElement("div",{className:"card__body"},r.createElement("p",null," ",e.children," "))))}},9205:function(e,t,n){"use strict";n.d(t,{A:function(){return c}});var r=n(7294),o="hidden_2JtY",a="iconContainer_2Rnc",i="visible_2147",l="link_Lh4h",s="clickable_3vcc",c=function(e){var t=" "+(e.active?i:o),n=l+" "+(e.link&&s);return r.createElement("div",{className:a+t},r.createElement("a",{href:e.link,className:n},e.icon||"\ud83d\ude80"))}},6649:function(e,t,n){"use strict";n.d(t,{x:function(){return a}});var r=n(7294),o="threeScene_3QXR",a=function(e){return r.createElement("iframe",{className:o,width:"100%",height:"600px",key:Math.random(),src:e.link,frameBorder:"0"})}},8441:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return m},toc:function(){return p},default:function(){return f}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=n(983),l=n(3878),s=n(6649),c=["components"],u={title:"\ud83e\udde0 Memory",sidebar_position:5},m={unversionedId:"Guide/web-ifc-viewer/Tutorials/Memory",id:"Guide/web-ifc-viewer/Tutorials/Memory",isDocsHomePage:!1,title:"\ud83e\udde0 Memory",description:"You can follow along with the full example on Github.",source:"@site/docs/Guide/web-ifc-viewer/Tutorials/Memory.mdx",sourceDirName:"Guide/web-ifc-viewer/Tutorials",slug:"/Guide/web-ifc-viewer/Tutorials/Memory",permalink:"/info/docs/Guide/web-ifc-viewer/Tutorials/Memory",version:"current",sidebarPosition:5,frontMatter:{title:"\ud83e\udde0 Memory",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\ud83d\uddc3\ufe0f IFC to gLTF",permalink:"/info/docs/Guide/web-ifc-viewer/Tutorials/IFC to gLTF"},next:{title:"web-ifc-viewer-API",permalink:"/info/docs/Guide/web-ifc-viewer/web-ifc-viewer-API"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"How to do it",id:"how-to-do-it",children:[{value:"Monitoring the memory",id:"monitoring-the-memory",children:[]},{value:"Load up the model",id:"load-up-the-model",children:[]},{value:"Dispose memory",id:"dispose-memory",children:[]}]},{value:"The result",id:"the-result",children:[]},{value:"Next steps",id:"next-steps",children:[]}],d={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(l.r,{mdxType:"IfcAlert"},"You can follow along with the full example on ",(0,a.kt)("a",{href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer/memory"},"Github"),"."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"\ud83d\ude80\ud83d\ude80\nYou have both freedom and responsibility when it comes to ",(0,a.kt)("strong",{parentName:"p"},"memory management")," in your IFC.js app. Fortunately, IFC.js lets you balance these to ",(0,a.kt)("strong",{parentName:"p"},"release memory")," very easily. Let's see how it's done. \ud83d\udc47"),(0,a.kt)(i.M,{mdxType:"IfcCard"},"\ud83d\uddd1\ufe0f IFC.js builds upon the Three.js ",(0,a.kt)("b",null,"dispose() ")," function. See how IFC.js does it ",(0,a.kt)("a",{href:"https://github.com/IFCjs/web-ifc-viewer/blob/master/viewer/src/ifc-viewer-api.ts#L220"},"here")," and ",(0,a.kt)("a",{href:"https://github.com/IFCjs/web-ifc-three/blob/main/web-ifc-three/src/IFC/components/MemoryCleaner.ts"},"here"),", and also read what Three.js",(0,a.kt)("a",{href:"https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects"}," has to say"),". \ud83d\uddd1\ufe0f"),(0,a.kt)("h2",{id:"how-to-do-it"},"How to do it"),(0,a.kt)("h3",{id:"monitoring-the-memory"},"Monitoring the memory"),(0,a.kt)("p",null,"\ud83d\udc40 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mrdoob/stats.js/"},"stats.js")," is a library to ",(0,a.kt)("strong",{parentName:"p"},"monitor the memory and performance")," of your Three.js app, made by the creator of Three.js himself. Let's go ahead and install with ",(0,a.kt)("inlineCode",{parentName:"p"},"npm i stats.js"),", ",(0,a.kt)("strong",{parentName:"p"},"import"),", ",(0,a.kt)("strong",{parentName:"p"},"initialize")," and ",(0,a.kt)("strong",{parentName:"p"},"attach it")," to our viewer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import Stats from "stats.js/src/Stats";\n\nconst stats = new Stats();\naddStats();\n\nfunction addStats() {\n    stats.showPanel(2);\n    document.body.append(stats.dom);\n    viewer.context.stats = stats;\n};\n')),(0,a.kt)("p",null,"\ud83d\udccb During development we don't have to second guess our memory management anymore, because now it's ",(0,a.kt)("strong",{parentName:"p"},"visualized")," for us."),(0,a.kt)(l.r,{mdxType:"IfcAlert"},"If you don't remember how to setup your viewer, just look at the ",(0,a.kt)("a",{href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer/memory"},"full example")," or at previous tutorials."),(0,a.kt)("h3",{id:"load-up-the-model"},"Load up the model"),(0,a.kt)("p",null,"\u26fd\u26fd First we'll ",(0,a.kt)("strong",{parentName:"p"},"create")," an HTML ",(0,a.kt)("strong",{parentName:"p"},"input button")," and use ",(0,a.kt)("inlineCode",{parentName:"p"},"loadIfc()")," to load our models from file. \ud83c\udfa8 Style as you wish!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" id="input-button" />\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"async function loadIfcFromFile(file) {\n  const model = await viewer.IFC.loadIfc(file, true);\n}\n")),(0,a.kt)(i.M,{mdxType:"IfcCard"},"\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f We call ",(0,a.kt)("a",{href:"https://github.com/IFCjs/web-ifc-viewer/blob/master/viewer/src/components/ifc/ifc-manager.ts#L42/"},"loadIfc()")," when a user loads an IFC file. Internally, it creates a URL then calls ",(0,a.kt)("a",{href:"https://github.com/IFCjs/web-ifc-viewer/blob/master/viewer/src/components/ifc/ifc-manager.ts#L53/"}," loadIfcUrl() "),"for us."),(0,a.kt)("p",null,"\ud83d\udc85 Now ",(0,a.kt)("strong",{parentName:"p"},"link")," the button and the function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3}","{3}":!0},'const input_button = document.getElementById("input-button");\ninput_button.addEventListener("input", (input) => {\n  loadIfcFromFile(input.target.files[0])},\n  false\n);\n')),(0,a.kt)("p",null,"So that we can load and release the same model over and over, for this example we'll add a tiny hack to reset the DOM event."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'input_button.addEventListener("click", (e) => {\n  e.target.value = "";\n});\n')),(0,a.kt)("h3",{id:"dispose-memory"},"Dispose memory"),(0,a.kt)("p",null,"\u270c\ud83e\udd64 Finally let's create our function to ",(0,a.kt)("strong",{parentName:"p"},"dispose")," memory on command using ",(0,a.kt)("inlineCode",{parentName:"p"},"dispose()"),". Here's how it's done:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function releaseMemory() {\n  viewer.dispose();\n  viewer = null;\n  viewer = new IfcViewerAPI({ container });\n  viewer.IFC.setWasmPath("../../../");\n  addStats();\n}\n')),(0,a.kt)("p",null,"\u2757\u2757 Keep in mind: Once we call ",(0,a.kt)("inlineCode",{parentName:"p"},"dispose()"),", we need to ",(0,a.kt)("strong",{parentName:"p"},"re-initialize")," our viewer instance (and Stats module)\u2757\u2757"),(0,a.kt)("p",null,"\u2328\ufe0f For this example let's attach our function to a new HTML button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<input type="button" id="release-button" value="Release Memory" />\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const release_button = document.getElementById("release-button");\nrelease_button.addEventListener("click", () => releaseMemory());\n')),(0,a.kt)("p",null,"\ud83e\uddea Try loading a model and releasing the memory: you'll notice our model disappears and our visualizer confirms this. Remember that it ",(0,a.kt)("strong",{parentName:"p"},"might take time")," for the garbage collector to do its job."),(0,a.kt)(l.r,{mdxType:"IfcAlert"},"We have ",(0,a.kt)("a",{href:"https://github.com/IFCjs/test-ifc-files"},"test files")," for you to try out different models."),(0,a.kt)("h2",{id:"the-result"},"The result"),(0,a.kt)("p",null,"\ud83d\ude0e This is how the application looks like:"),(0,a.kt)("a",{href:"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer/memory/"},"Github repo"),(0,a.kt)(s.x,{link:"https://ifcjs.github.io/hello-world/examples/web-ifc-viewer/memory/index.html",mdxType:"Scene"}),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"\ud83c\udf89\ud83c\udf89\ud83c\udf89\nCongratulations! Your IFC.js apps are now ",(0,a.kt)("strong",{parentName:"p"},"free of memory leaks"),". This memory management will keep your app squeaky clean and running smooth.\n\ud83d\udcaa\ud83d\udcaa\ud83d\udcaa"))}f.isMDXComponent=!0}}]);